{
  "openapi": "3.0.0",
  "paths": {
    "/": {
      "get": {
        "operationId": "AppController_getHello",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "App"
        ]
      }
    },
    "/users": {
      "post": {
        "description": "Creates a new user with specified details. Requires admin role.",
        "operationId": "UsersController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The user has been successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11"
                    },
                    "name": {
                      "type": "string",
                      "example": "John Doe"
                    },
                    "email": {
                      "type": "string",
                      "example": "john@example.com"
                    },
                    "role": {
                      "type": "string",
                      "example": "user"
                    },
                    "provider": {
                      "type": "string",
                      "example": "local"
                    },
                    "providerId": {
                      "type": "string",
                      "example": null
                    },
                    "createdAt": {
                      "type": "string",
                      "example": "2023-01-01T00:00:00Z"
                    },
                    "updatedAt": {
                      "type": "string",
                      "example": "2023-01-01T00:00:00Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "403": {
            "description": "Forbidden - Admin role required."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new user (admin only)",
        "tags": [
          "users"
        ]
      },
      "get": {
        "operationId": "UsersController_findAll",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Returns an array of all users.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "email": {
                        "type": "string"
                      },
                      "role": {
                        "type": "string"
                      },
                      "provider": {
                        "type": "string"
                      },
                      "providerId": {
                        "type": "string"
                      },
                      "createdAt": {
                        "type": "string"
                      },
                      "updatedAt": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all users (admin only)",
        "tags": [
          "users"
        ]
      }
    },
    "/users/admin": {
      "post": {
        "operationId": "UsersController_createAdmin",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAdminDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The admin has been successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11"
                    },
                    "name": {
                      "type": "string",
                      "example": "Admin User"
                    },
                    "email": {
                      "type": "string",
                      "example": "admin@example.com"
                    },
                    "role": {
                      "type": "string",
                      "example": "admin"
                    },
                    "provider": {
                      "type": "string",
                      "example": "local"
                    },
                    "createdAt": {
                      "type": "string",
                      "example": "2023-01-01T00:00:00Z"
                    },
                    "updatedAt": {
                      "type": "string",
                      "example": "2023-01-01T00:00:00Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Unauthorized - Invalid admin registration key."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Register a new admin user",
        "tags": [
          "users"
        ]
      }
    },
    "/users/merchant": {
      "post": {
        "operationId": "UsersController_createMerchant",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMerchantDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The merchant has been successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11"
                    },
                    "name": {
                      "type": "string",
                      "example": "Merchant Store"
                    },
                    "email": {
                      "type": "string",
                      "example": "merchant@example.com"
                    },
                    "role": {
                      "type": "string",
                      "example": "merchant"
                    },
                    "provider": {
                      "type": "string",
                      "example": "local"
                    },
                    "isVerified": {
                      "type": "boolean",
                      "example": false
                    },
                    "createdAt": {
                      "type": "string",
                      "example": "2023-01-01T00:00:00Z"
                    },
                    "updatedAt": {
                      "type": "string",
                      "example": "2023-01-01T00:00:00Z"
                    },
                    "merchantProfile": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "b1eebc99-9c0b-4ef8-bb6d-6bb9bd380a22"
                        },
                        "storeName": {
                          "type": "string",
                          "example": "My Awesome Store"
                        },
                        "location": {
                          "type": "string",
                          "example": "123 Main St, City, Country"
                        },
                        "storeNumber": {
                          "type": "string",
                          "example": "A-123"
                        },
                        "phoneNumber": {
                          "type": "string",
                          "example": "+1-555-123-4567"
                        },
                        "description": {
                          "type": "string",
                          "example": "We sell high-quality products"
                        },
                        "createdAt": {
                          "type": "string",
                          "example": "2023-01-01T00:00:00Z"
                        },
                        "updatedAt": {
                          "type": "string",
                          "example": "2023-01-01T00:00:00Z"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Register a new merchant",
        "tags": [
          "users"
        ]
      }
    },
    "/users/{id}": {
      "get": {
        "operationId": "UsersController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "User ID",
            "schema": {
              "example": "a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the user with the specified ID.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "email": {
                      "type": "string"
                    },
                    "role": {
                      "type": "string"
                    },
                    "provider": {
                      "type": "string"
                    },
                    "providerId": {
                      "type": "string"
                    },
                    "isVerified": {
                      "type": "boolean"
                    },
                    "createdAt": {
                      "type": "string"
                    },
                    "updatedAt": {
                      "type": "string"
                    },
                    "merchantProfile": {
                      "type": "object",
                      "nullable": true,
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "storeName": {
                          "type": "string"
                        },
                        "location": {
                          "type": "string"
                        },
                        "storeNumber": {
                          "type": "string",
                          "nullable": true
                        },
                        "phoneNumber": {
                          "type": "string",
                          "nullable": true
                        },
                        "description": {
                          "type": "string",
                          "nullable": true
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get a user by ID",
        "tags": [
          "users"
        ]
      },
      "patch": {
        "operationId": "UsersController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "User ID",
            "schema": {
              "example": "a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The user has been successfully updated."
          },
          "400": {
            "description": "Bad Request."
          },
          "404": {
            "description": "User not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update a user",
        "tags": [
          "users"
        ]
      },
      "delete": {
        "operationId": "UsersController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "User ID",
            "schema": {
              "example": "a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The user has been successfully deleted."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "User not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete a user (admin only)",
        "tags": [
          "users"
        ]
      }
    },
    "/users/{id}/verify": {
      "patch": {
        "operationId": "UsersController_verifyUser",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "User ID to verify",
            "schema": {
              "example": "a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The user has been successfully verified."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "User not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Verify a user (admin only)",
        "tags": [
          "users"
        ]
      }
    },
    "/users/verification/status/{id}": {
      "get": {
        "operationId": "UsersController_checkVerificationStatus",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "User ID",
            "schema": {
              "example": "a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns whether the user meets verification requirements",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "isVerified": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Check user verification status",
        "tags": [
          "users"
        ]
      }
    },
    "/auth/register": {
      "post": {
        "operationId": "AuthController_register",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registration successful",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "user": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "email": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "role": {
                          "type": "string"
                        }
                      }
                    },
                    "access_token": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        },
        "summary": "Register a new user",
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/login": {
      "post": {
        "operationId": "AuthController_login",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "user@example.com"
                  },
                  "password": {
                    "type": "string",
                    "example": "password123"
                  }
                },
                "required": [
                  "email",
                  "password"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "user": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "email": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "role": {
                          "type": "string"
                        }
                      }
                    },
                    "access_token": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "summary": "Log in with email and password",
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/google": {
      "get": {
        "operationId": "AuthController_googleAuth",
        "parameters": [],
        "responses": {
          "302": {
            "description": "Redirect to Google authentication"
          }
        },
        "summary": "Initiate Google OAuth login flow",
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/profile": {
      "get": {
        "operationId": "AuthController_getProfile",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Returns the authenticated user profile"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get the current user profile",
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/verify-email/send": {
      "post": {
        "operationId": "AuthController_sendVerificationEmail",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "user@example.com"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Verification email sent successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Send a verification email to the user",
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/verify-email": {
      "get": {
        "operationId": "AuthController_verifyEmail",
        "parameters": [
          {
            "name": "token",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Email verified successfully"
          },
          "400": {
            "description": "Invalid verification token"
          }
        },
        "summary": "Verify user email with token",
        "tags": [
          "auth"
        ]
      }
    }
  },
  "info": {
    "title": "User Service API",
    "description": "API documentation for the ecommerce platform user service",
    "version": "1.0",
    "contact": {}
  },
  "tags": [
    {
      "name": "users",
      "description": ""
    },
    {
      "name": "auth",
      "description": ""
    }
  ],
  "servers": [],
  "components": {
    "securitySchemes": {
      "bearer": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http"
      }
    },
    "schemas": {
      "CreateUserDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "John Doe",
            "description": "The name of the user"
          },
          "email": {
            "type": "string",
            "example": "john@example.com",
            "description": "The email address of the user"
          },
          "password": {
            "type": "string",
            "example": "password123",
            "description": "The password for the user account",
            "minLength": 6
          },
          "role": {
            "type": "string",
            "enum": [
              "ADMIN",
              "USER",
              "MERCHANT"
            ],
            "example": "USER",
            "description": "The role assigned to the user"
          },
          "provider": {
            "type": "string",
            "enum": [
              "LOCAL",
              "GOOGLE"
            ],
            "example": "LOCAL",
            "description": "The authentication provider (local or OAuth service)"
          },
          "providerId": {
            "type": "string",
            "example": "123456789",
            "description": "The ID from the OAuth provider if applicable"
          }
        },
        "required": [
          "name",
          "email"
        ]
      },
      "CreateAdminDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "John Doe",
            "description": "The name of the admin"
          },
          "email": {
            "type": "string",
            "example": "admin@example.com",
            "description": "The email address of the admin"
          },
          "password": {
            "type": "string",
            "example": "StrongP@ss123",
            "description": "The password must be at least 8 characters long and contain uppercase, lowercase, number and special character",
            "minLength": 8
          },
          "adminSecretKey": {
            "type": "string",
            "example": "ADMIN_SECRET_KEY",
            "description": "The admin registration secret key"
          },
          "provider": {
            "type": "string",
            "enum": [
              "LOCAL",
              "GOOGLE"
            ],
            "example": "LOCAL",
            "description": "The authentication provider",
            "default": "LOCAL"
          }
        },
        "required": [
          "name",
          "email",
          "password",
          "adminSecretKey",
          "provider"
        ]
      },
      "CreateMerchantDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "John Doe",
            "description": "The name of the merchant"
          },
          "email": {
            "type": "string",
            "example": "merchant@example.com",
            "description": "The email address of the merchant"
          },
          "password": {
            "type": "string",
            "example": "password123",
            "description": "The password for the merchant account",
            "minLength": 6
          },
          "provider": {
            "type": "string",
            "enum": [
              "LOCAL",
              "GOOGLE"
            ],
            "example": "LOCAL",
            "description": "The authentication provider (local or OAuth service)"
          },
          "providerId": {
            "type": "string",
            "example": "123456789",
            "description": "The ID from the OAuth provider if applicable"
          },
          "storeName": {
            "type": "string",
            "example": "My Awesome Store",
            "description": "The name of the store"
          },
          "location": {
            "type": "string",
            "example": "123 Main St, City, Country",
            "description": "The location of the store"
          },
          "storeNumber": {
            "type": "string",
            "example": "A-123",
            "description": "Store number or identifier"
          },
          "phoneNumber": {
            "type": "string",
            "example": "+1-555-123-4567",
            "description": "Store contact number"
          },
          "description": {
            "type": "string",
            "example": "We sell high-quality products",
            "description": "Store description"
          }
        },
        "required": [
          "name",
          "email",
          "password",
          "storeName",
          "location"
        ]
      },
      "UpdateUserDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "John Doe",
            "description": "The updated name of the user"
          },
          "email": {
            "type": "string",
            "example": "john@example.com",
            "description": "The updated email address of the user"
          },
          "password": {
            "type": "string",
            "example": "newpassword123",
            "description": "The updated password for the user account"
          },
          "role": {
            "type": "string",
            "enum": [
              "ADMIN",
              "USER",
              "MERCHANT"
            ],
            "example": "USER",
            "description": "The updated role for the user"
          }
        }
      }
    }
  }
}