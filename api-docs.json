{
  "name": "User Service API",
  "version": "1.0.0",
  "description": "API documentation for the ecommerce platform user service",
  "baseUrl": "http://localhost:3000",
  "rateLimiting": {
    "windowMs": 900000,
    "max": 100,
    "message": "Too many requests, please try again later"
  },
  "endpoints": {
    "auth": {
      "register": {
        "path": "/auth/register",
        "method": "POST",
        "description": "Register a new user",
        "authentication": "None",
        "request": {
          "contentType": "application/json",
          "body": {
            "name": "string",
            "email": "string",
            "password": "string"
          }
        },
        "response": {
          "success": {
            "statusCode": 201,
            "body": {
              "user": {
                "id": "string",
                "email": "string",
                "name": "string",
                "role": "user"
              },
              "access_token": "string"
            }
          },
          "error": {
            "statusCode": 400,
            "body": {
              "message": "Bad request",
              "error": "Bad Request"
            }
          }
        }
      },
      "login": {
        "path": "/auth/login",
        "method": "POST",
        "description": "Log in with email and password",
        "authentication": "None",
        "request": {
          "contentType": "application/json",
          "body": {
            "email": "string",
            "password": "string"
          }
        },
        "response": {
          "success": {
            "statusCode": 200,
            "body": {
              "user": {
                "id": "string",
                "email": "string",
                "name": "string",
                "role": "string"
              },
              "access_token": "string"
            }
          },
          "error": {
            "statusCode": 401,
            "body": {
              "message": "Invalid credentials",
              "error": "Unauthorized"
            }
          }
        }
      },
      "googleAuth": {
        "path": "/auth/google",
        "method": "GET",
        "description": "Initiate Google OAuth login flow",
        "authentication": "None",
        "response": {
          "success": {
            "statusCode": 302,
            "description": "Redirect to Google authentication"
          }
        }
      },
      "googleCallback": {
        "path": "/auth/google/callback",
        "method": "GET",
        "description": "Handle Google OAuth callback",
        "authentication": "None",
        "response": {
          "success": {
            "statusCode": 200,
            "body": {
              "user": {
                "id": "string",
                "email": "string",
                "name": "string",
                "role": "string"
              },
              "access_token": "string"
            }
          }
        }
      },
      "profile": {
        "path": "/auth/profile",
        "method": "GET",
        "description": "Get the current user profile",
        "authentication": "JWT",
        "headers": {
          "Authorization": "Bearer {token}"
        },
        "response": {
          "success": {
            "statusCode": 200,
            "body": {
              "id": "string",
              "email": "string",
              "name": "string",
              "role": "string",
              "provider": "string",
              "providerId": "string",
              "createdAt": "string",
              "updatedAt": "string"
            }
          },
          "error": {
            "statusCode": 401,
            "body": {
              "message": "Unauthorized",
              "error": "Unauthorized"
            }
          }
        }
      },
      "verifyEmail": {
        "path": "/auth/verify-email",
        "method": "GET",
        "description": "Verify user email with token",
        "authentication": "None",
        "queryParameters": {
          "token": {
            "type": "string",
            "description": "Email verification token",
            "required": true
          }
        },
        "response": {
          "success": {
            "statusCode": 200,
            "body": {
              "message": "Email verified successfully"
            }
          },
          "error": {
            "statusCode": 400,
            "body": {
              "message": "Invalid or expired token",
              "error": "Bad Request"
            }
          }
        }
      },
      "sendVerificationEmail": {
        "path": "/auth/verify-email/send",
        "method": "POST",
        "description": "Send email verification link",
        "authentication": "JWT",
        "headers": {
          "Authorization": "Bearer {token}"
        },
        "request": {
          "contentType": "application/json",
          "body": {
            "email": "string"
          }
        },
        "response": {
          "success": {
            "statusCode": 200,
            "body": {
              "message": "Verification email sent"
            }
          },
          "error": {
            "statusCode": 400,
            "body": {
              "message": "User not found",
              "error": "Bad Request"
            }
          }
        }
      }
    },
    "users": {
      "create": {
        "path": "/users",
        "method": "POST",
        "description": "Create a new user",
        "authentication": "JWT",
        "headers": {
          "Authorization": "Bearer {token}"
        },
        "request": {
          "contentType": "application/json",
          "body": {
            "name": "string",
            "email": "string",
            "password": "string",
            "role": "string",
            "provider": "string",
            "providerId": "string"
          }
        },
        "response": {
          "success": {
            "statusCode": 201,
            "body": {
              "id": "string",
              "name": "string",
              "email": "string",
              "role": "string",
              "provider": "string",
              "providerId": "string",
              "createdAt": "string",
              "updatedAt": "string"
            }
          },
          "error": {
            "statusCode": 400,
            "body": {
              "message": "Bad request",
              "error": "Bad Request"
            }
          }
        }
      },
      "createAdmin": {
        "path": "/users/admin",
        "method": "POST",
        "description": "Register a new admin user",
        "authentication": "JWT",
        "headers": {
          "Authorization": "Bearer {token}"
        },
        "request": {
          "contentType": "application/json",
          "body": {
            "name": "string",
            "email": "string",
            "password": "string",
            "adminSecretKey": "string",
            "provider": "string"
          }
        },
        "response": {
          "success": {
            "statusCode": 201,
            "body": {
              "id": "string",
              "name": "string",
              "email": "string",
              "role": "admin",
              "provider": "string",
              "providerId": "string",
              "createdAt": "string",
              "updatedAt": "string"
            }
          },
          "error": {
            "statusCode": 401,
            "body": {
              "message": "Invalid admin registration key",
              "error": "Unauthorized"
            }
          }
        }
      },
      "findAll": {
        "path": "/users",
        "method": "GET",
        "description": "Get all users (admin only)",
        "authentication": "JWT + Admin Role",
        "headers": {
          "Authorization": "Bearer {token}"
        },
        "queryParameters": {
          "page": {
            "type": "number",
            "description": "Page number (default: 1)",
            "required": false
          },
          "limit": {
            "type": "number",
            "description": "Number of items per page (default: 10)",
            "required": false
          },
          "sort": {
            "type": "string",
            "description": "Sort field (default: createdAt)",
            "required": false
          },
          "order": {
            "type": "string",
            "description": "Sort order (asc/desc, default: desc)",
            "required": false
          }
        },
        "response": {
          "success": {
            "statusCode": 200,
            "body": {
              "data": [
                {
                  "id": "string",
                  "name": "string",
                  "email": "string",
                  "role": "string",
                  "provider": "string",
                  "providerId": "string",
                  "createdAt": "string",
                  "updatedAt": "string"
                }
              ],
              "meta": {
                "total": "number",
                "page": "number",
                "limit": "number",
                "totalPages": "number"
              }
            }
          },
          "error": {
            "statusCode": 403,
            "body": {
              "message": "Forbidden",
              "error": "Forbidden"
            }
          }
        }
      },
      "findOne": {
        "path": "/users/{id}",
        "method": "GET",
        "description": "Get a user by ID",
        "authentication": "JWT",
        "headers": {
          "Authorization": "Bearer {token}"
        },
        "parameters": {
          "id": {
            "type": "string",
            "description": "User ID",
            "required": true
          }
        },
        "response": {
          "success": {
            "statusCode": 200,
            "body": {
              "id": "string",
              "name": "string",
              "email": "string",
              "role": "string",
              "provider": "string",
              "providerId": "string",
              "createdAt": "string",
              "updatedAt": "string"
            }
          },
          "error": {
            "statusCode": 404,
            "body": {
              "message": "User with ID {id} not found",
              "error": "Not Found"
            }
          }
        }
      },
      "update": {
        "path": "/users/{id}",
        "method": "PATCH",
        "description": "Update a user",
        "authentication": "JWT",
        "headers": {
          "Authorization": "Bearer {token}"
        },
        "parameters": {
          "id": {
            "type": "string",
            "description": "User ID",
            "required": true
          }
        },
        "request": {
          "contentType": "application/json",
          "body": {
            "name": "string",
            "email": "string",
            "password": "string",
            "role": "string"
          }
        },
        "response": {
          "success": {
            "statusCode": 200,
            "body": {
              "id": "string",
              "name": "string",
              "email": "string",
              "role": "string",
              "provider": "string",
              "providerId": "string",
              "createdAt": "string",
              "updatedAt": "string"
            }
          },
          "error": {
            "statusCode": 400,
            "body": {
              "message": "Bad request",
              "error": "Bad Request"
            }
          },
          "notFound": {
            "statusCode": 404,
            "body": {
              "message": "User with ID {id} not found",
              "error": "Not Found"
            }
          }
        }
      },
      "remove": {
        "path": "/users/{id}",
        "method": "DELETE",
        "description": "Delete a user (admin only)",
        "authentication": "JWT + Admin Role",
        "headers": {
          "Authorization": "Bearer {token}"
        },
        "parameters": {
          "id": {
            "type": "string",
            "description": "User ID",
            "required": true
          }
        },
        "response": {
          "success": {
            "statusCode": 200,
            "body": {}
          },
          "error": {
            "statusCode": 403,
            "body": {
              "message": "Forbidden",
              "error": "Forbidden"
            }
          },
          "notFound": {
            "statusCode": 404,
            "body": {
              "message": "User with ID {id} not found",
              "error": "Not Found"
            }
          }
        }
      },
      "merchants": {
        "create": {
          "path": "/users/merchants",
          "method": "POST",
          "description": "Register a new merchant",
          "authentication": "None",
          "request": {
            "contentType": "application/json",
            "body": {
              "name": "string",
              "email": "string",
              "password": "string",
              "storeName": "string",
              "location": "string",
              "storeNumber": "string",
              "phoneNumber": "string",
              "description": "string"
            }
          },
          "response": {
            "success": {
              "statusCode": 201,
              "body": {
                "user": {
                  "id": "string",
                  "name": "string",
                  "email": "string",
                  "role": "merchant",
                  "isVerified": false,
                  "isEmailVerified": false,
                  "merchantProfile": {
                    "id": "string",
                    "storeName": "string",
                    "location": "string",
                    "storeNumber": "string",
                    "phoneNumber": "string",
                    "description": "string"
                  }
                }
              }
            },
            "error": {
              "statusCode": 400,
              "body": {
                "message": "Bad request",
                "error": "Bad Request"
              }
            }
          }
        },
        "findOne": {
          "path": "/users/merchants/{id}",
          "method": "GET",
          "description": "Get merchant profile by ID",
          "authentication": "JWT",
          "headers": {
            "Authorization": "Bearer {token}"
          },
          "parameters": {
            "id": {
              "type": "string",
              "description": "Merchant ID",
              "required": true
            }
          },
          "response": {
            "success": {
              "statusCode": 200,
              "body": {
                "id": "string",
                "name": "string",
                "email": "string",
                "role": "merchant",
                "isVerified": "boolean",
                "isEmailVerified": "boolean",
                "merchantProfile": {
                  "id": "string",
                  "storeName": "string",
                  "location": "string",
                  "storeNumber": "string",
                  "phoneNumber": "string",
                  "description": "string"
                }
              }
            },
            "error": {
              "statusCode": 404,
              "body": {
                "message": "Merchant not found",
                "error": "Not Found"
              }
            }
          }
        },
        "verify": {
          "path": "/users/merchants/{id}/verify",
          "method": "PATCH",
          "description": "Verify a merchant account (admin only)",
          "authentication": "JWT + Admin Role",
          "headers": {
            "Authorization": "Bearer {token}"
          },
          "parameters": {
            "id": {
              "type": "string",
              "description": "Merchant ID",
              "required": true
            }
          },
          "response": {
            "success": {
              "statusCode": 200,
              "body": {
                "id": "string",
                "isVerified": true
              }
            },
            "error": {
              "statusCode": 403,
              "body": {
                "message": "Forbidden",
                "error": "Forbidden"
              }
            }
          }
        },
        "update": {
          "path": "/users/merchants/{id}",
          "method": "PATCH",
          "description": "Update merchant profile",
          "authentication": "JWT",
          "headers": {
            "Authorization": "Bearer {token}"
          },
          "parameters": {
            "id": {
              "type": "string",
              "description": "Merchant ID",
              "required": true
            }
          },
          "request": {
            "contentType": "application/json",
            "body": {
              "storeName": "string",
              "location": "string",
              "storeNumber": "string",
              "phoneNumber": "string",
              "description": "string"
            }
          },
          "response": {
            "success": {
              "statusCode": 200,
              "body": {
                "id": "string",
                "merchantProfile": {
                  "id": "string",
                  "storeName": "string",
                  "location": "string",
                  "storeNumber": "string",
                  "phoneNumber": "string",
                  "description": "string"
                }
              }
            },
            "error": {
              "statusCode": 400,
              "body": {
                "message": "Bad request",
                "error": "Bad Request"
              }
            }
          }
        },
        "findAll": {
          "path": "/users/merchants",
          "method": "GET",
          "description": "Get all merchants (admin only)",
          "authentication": "JWT + Admin Role",
          "headers": {
            "Authorization": "Bearer {token}"
          },
          "response": {
            "success": {
              "statusCode": 200,
              "body": [
                {
                  "id": "string",
                  "name": "string",
                  "email": "string",
                  "role": "merchant",
                  "isVerified": "boolean",
                  "isEmailVerified": "boolean",
                  "merchantProfile": {
                    "id": "string",
                    "storeName": "string",
                    "location": "string",
                    "storeNumber": "string",
                    "phoneNumber": "string",
                    "description": "string"
                  }
                }
              ]
            },
            "error": {
              "statusCode": 403,
              "body": {
                "message": "Forbidden",
                "error": "Forbidden"
              }
            }
          }
        }
      }
    }
  },
  "authentication": {
    "jwt": {
      "type": "Bearer",
      "description": "JWT token obtained from login or register endpoints",
      "header": "Authorization: Bearer {token}",
      "tokenExpiration": "24h"
    },
    "roles": {
      "user": "Regular user with limited permissions",
      "admin": "Administrator with full access",
      "merchant": "Merchant with store management capabilities"
    }
  },
  "dataModels": {
    "User": {
      "id": "string (UUID)",
      "name": "string",
      "email": "string",
      "password": "string (hashed)",
      "role": "enum (user, admin, merchant)",
      "provider": "enum (local, google)",
      "providerId": "string",
      "createdAt": "Date",
      "updatedAt": "Date",
      "lastLoginAt": "Date",
      "isActive": "boolean",
      "isVerified": "boolean",
      "isEmailVerified": "boolean",
      "emailVerifyToken": "string",
      "emailVerifyExpires": "Date"
    },
    "MerchantProfile": {
      "id": "string (UUID)",
      "userId": "string (UUID)",
      "storeName": "string",
      "location": "string",
      "storeNumber": "string",
      "phoneNumber": "string",
      "description": "string",
      "createdAt": "Date",
      "updatedAt": "Date"
    },
    "CreateUserDto": {
      "name": "string",
      "email": "string",
      "password": "string",
      "role": "enum (user, admin, merchant)",
      "provider": "enum (local, google)",
      "providerId": "string"
    },
    "CreateMerchantDto": {
      "name": "string",
      "email": "string",
      "password": "string",
      "provider": "enum (local, google)",
      "storeName": "string",
      "location": "string",
      "storeNumber": "string",
      "phoneNumber": "string",
      "description": "string"
    },
    "UpdateUserDto": {
      "name": "string",
      "email": "string",
      "password": "string",
      "role": "enum (user, admin, merchant)",
      "isActive": "boolean"
    },
    "CreateAdminDto": {
      "name": "string",
      "email": "string",
      "password": "string",
      "adminSecretKey": "string",
      "provider": "enum (local, google)"
    }
  },
  "errorCodes": {
    "400": "Bad Request - Invalid input data",
    "401": "Unauthorized - Invalid credentials or token",
    "403": "Forbidden - Insufficient permissions",
    "404": "Not Found - Resource not found",
    "409": "Conflict - Resource already exists",
    "422": "Unprocessable Entity - Validation error",
    "429": "Too Many Requests - Rate limit exceeded",
    "500": "Internal Server Error - Server-side error",
    "503": "Service Unavailable - Service temporarily unavailable"
  },
  "swagger": {
    "url": "/api",
    "description": "Interactive API documentation using Swagger UI"
  }
} 